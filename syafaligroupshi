"use client";
import React, { useState, useEffect } from "react";
import Image from "next/image";
import Link from "next/link";
import { toast, ToastContainer } from 'react-toastify';


// Define the type for a product in the cart
interface CartItem {
  title: string;
  image: string;
  price: number;
  quantity?: number; // Optional, will be added in grouping
}

const CartPage = () => {
  const [cart, setCart] = useState<CartItem[]>([]);
  const notify = () => toast.info('Deleted from cart!',{position:"bottom-right", theme: "dark"});
  

  useEffect(() => {
    const storedCart = JSON.parse(localStorage.getItem("cart") || "[]");
    setCart(storedCart);
  }, []);

  // Group the products by title and count the quantity
  const groupedCart = cart.reduce((acc: CartItem[], product: CartItem) => {
    const existingProduct = acc.find((p) => p.title === product.title);
    if (existingProduct) {
      existingProduct.quantity! += 1; // Increase quantity for the existing product
    } else {
      acc.push({ ...product, quantity: 1 });
    }
    return acc;
  }, []);

  // Flatten grouped items back to the original format for saving to localStorage
  const flattenCart = groupedCart.flatMap((item) =>
    Array(item.quantity).fill(item)
  );

  const handleDeleteItem = (index: number) => {
    // Remove the item at the specified index from the cart
    const updatedCart = flattenCart.filter((_, i) => i !== index);
    setCart(updatedCart);
    localStorage.setItem("cart", JSON.stringify(updatedCart));
    notify()
  };

  const handleCheckout = () => {
    setCart([]);
    localStorage.removeItem("cart");
  };

  // Calculate the total price by considering the price and quantity of each item
  const totalPrice = groupedCart.reduce(
    (acc, product) => acc + product.price * (product.quantity || 1),
    0
  );

  return (
    <div className="flex flex-col items-center justify-center mb-10 text-gray-800">
      <h1 className="text-3xl font-bold">Your Cart</h1>
      <p className="text-lg mt-2">{cart.length} {cart.length === 1 ? "item" : "items"} in your cart</p>
      {cart.length === 0 ? (
        <p className="text-lg mt-2">Your cart is empty.</p>
      ) : (
        <div className="mt-4 space-y-4">
          {groupedCart.map((product, index) => (
            <div
              key={index}
              className="flex w-[45vw] items-center justify-between p-4 bg-gray-100 rounded-lg shadow-md"
            >
              <div className="flex items-center">
                <Image
                  src={product.image}
                  alt={product.title}
                  width={100}
                  height={100}
                  className="rounded-lg"
                />
                <div className="ml-4">
                  <p className="text-xl font-semibold">{product.title}</p>
                  <div className="flex flex-row gap-2">
                    <p className="text-lg text-gray-500">${product.price.toFixed(2)}</p>
                    <span className="text-lg text-gray-500">x{product.quantity}</span>
                  </div>
                </div>
              </div>
              <div className="flex items-center space-x-4">
                <p className="text-lg">${(product.price * (product.quantity || 1)).toFixed(2)}</p>
                <button
                  onClick={() => handleDeleteItem(index)}
                  className="text-red-500 hover:text-red-700"
                >
                  Delete
                </button>
              </div>
            </div>
          ))}
          <div className="flex justify-between flex-row">
            <div className="mt-4 text-xl font-semibold">
              Total Price: ${totalPrice.toFixed(2)}
            </div>
            <Link href={"/payment"}>
              <button
                onClick={handleCheckout}
                className="mt-4 text-xl font-semibold bg-blue-600 text-white py-2 px-6 rounded-lg shadow-lg hover:bg-blue-700 transition duration-300"
              >
                Checkout
              </button>
            </Link>
          </div>
        </div>
      )}
      <ToastContainer  />
    </div>
  );
};

export default CartPage;
